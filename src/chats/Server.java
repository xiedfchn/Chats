/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package chats;

// data stream
// buffered reader package, read data per line
import static chats.Client.f;
import static chats.SHA.shaEncode;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
// data out stream package, socket data output is the same
import java.io.FileOutputStream;
// Exception
import java.io.IOException;
// input stream package and reader
import java.io.InputStream;
// print stream package, print a line 
// socket and serversocket
import java.net.ServerSocket;
import java.net.Socket;
import java.security.PublicKey;
// exception logger
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
// file chooser;

// Client class from Frame
public class Server extends javax.swing.JFrame {

    // app2 mean it ownself act as endB;
    RSA app2;
    // app mean it ownself act as endA, the one requesting for secure conncection;
    RSA app;
    // Client socket 
    static Socket s;
    // Server socket 
    static ServerSocket ss;
    PublicKey publicKeyOfOther;
    static DataOutputStream out;
    AESClass aes;
    Boolean isSecureMode = false;
    // Data from input

    /**
     * Creates new form Client
     */
    public Server() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        msg_area = new javax.swing.JTextArea();
        msg_text = new javax.swing.JTextField();
        msg_send = new javax.swing.JButton();
        start_btn = new javax.swing.JButton();
        stop_btn = new javax.swing.JButton();
        file_btn = new javax.swing.JButton();
        fileAddress_lable = new javax.swing.JLabel();
        security_btn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Chat - Server's frame");

        msg_area.setColumns(20);
        msg_area.setRows(5);
        jScrollPane1.setViewportView(msg_area);

        msg_text.setToolTipText("");

        msg_send.setText("Send");
        msg_send.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                msg_sendActionPerformed(evt);
            }
        });

        start_btn.setText("Start");
        start_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                start_btnActionPerformed(evt);
            }
        });

        stop_btn.setText("Stop");
        stop_btn.setEnabled(false);
        stop_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stop_btnActionPerformed(evt);
            }
        });

        file_btn.setText("Choose");
        file_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                file_btnActionPerformed(evt);
            }
        });

        fileAddress_lable.setText("File address..");

        security_btn.setText("Security");
        security_btn.setToolTipText("");
        security_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                security_btnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(msg_text)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(msg_send)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(security_btn))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(file_btn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fileAddress_lable)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 283, Short.MAX_VALUE)
                        .addComponent(start_btn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(stop_btn)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(11, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fileAddress_lable)
                    .addComponent(file_btn)
                    .addComponent(stop_btn)
                    .addComponent(start_btn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(msg_text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(msg_send)
                    .addComponent(security_btn))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void msg_sendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_msg_sendActionPerformed
        try {
            out = new DataOutputStream(new BufferedOutputStream(s.getOutputStream()));
        } catch (IOException ex) {
            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
        }
        // Send file or message?
        if (fileAddress_lable.getText() != "File address..") {
            // Show info to user;
            msg_area.append("\n\nStart transfer...\n");
            msg_area.append("File is " + (int) f.length() + " byte.\n");
            try {
                if (isSecureMode) {

                    InputStream is = new FileInputStream(f);
                    ByteArrayOutputStream buffer2 = new ByteArrayOutputStream();
                    // Get the size of the file
                    int length = (int) f.length();
                    byte[] bytes = new byte[32];
                    int a = 0;

                    while (length > 0 && ((a = is.read(bytes)) != -1)) {
                        length -= a;
                        buffer2.write(bytes, 0, a);
                    }
                    byte[] input = buffer2.toByteArray();
                    byte[] sData = aes.encrypt(input, aes.secretKeySpec);

                    System.out.println("transfer in cipher:" + new String(sData).substring(0,200));

                    out.writeChar('f');
                    out.writeLong(sData.length);
                    out.write(sData);
                    out.flush();
                    is.close();
                } else {

                    InputStream is = new FileInputStream(f);

                    // Get the size of the file
                    int length = (int) f.length();
                    out.writeChar('f');
                    out.writeLong(length);
                    byte[] bytes = new byte[32];
                    int a;
                    while ((a = is.read(bytes)) > 0) {

                        out.write(bytes, 0, a);
                        length -= a;
                        System.out.println("length:" + length);
                        System.out.println("bytes:" + a);
                        // send a lock of data even if it is not big enough
                        out.flush();
                    }
                    is.close();
                }
                //show info
                msg_area.append("Transfer finished.\n\n");
                // reset file address
                fileAddress_lable.setText("File address..");
            } catch (IOException ex) {
                Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            try {
                out.writeChar('m');
                if (isSecureMode) {;
                    try {
                        String msg = msg_text.getText();
                        msg_text.setText("");
                        msg_area.append("\nMe:" + msg);
                        msg = aes.encrypt(msg, aes.secretKeySpec);
                        System.out.println(msg);
                        out.writeUTF(msg);
                        out.flush();
                    } catch (IOException ex) {
                        Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else {

                    try {
                        String msg = msg_text.getText();
                        msg_text.setText("");
                        msg_area.append("\nMe:" + msg);
                        out.writeUTF(msg);
                        System.out.println(msg);
                        out.flush();
                    } catch (IOException ex) {
                        Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                out.flush();
            } catch (IOException ex) {
                Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_msg_sendActionPerformed
    public class Receive implements Runnable {

        // Variables
        InputStream is;
        DataInputStream in;
        String passB;
        String passA;
        boolean isRuning =  true;

        public void kill() {
            isRuning = false;
        }
        // Constructor. initislise basic variables
        public Receive() {
            try {
                // Input stream
                is = s.getInputStream();
                in = new DataInputStream(new BufferedInputStream(s.getInputStream()));
            } catch (IOException e1) {
                System.out.println(e1.getMessage());
            }
        }

        
        @Override
        public void run() {
            while (isRuning) {
                try {
                   // if we recieve data (public key of client) 
                    if (in.available() > 0) {
                        // to check the type of communication (s(first step),v(),f..)
                        char type = 0;
                        try {
                            type = in.readChar();
                        } catch (IOException ex) {
                            Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        // if file
                        if (type == 'f') {

                            if (isSecureMode) {
                                byte[] sData = Tools.getByteData(in);
                                msg_area.append("\n\nA client is sending you a file\nsize:" + sData.length);
                                byte[] dataResult = aes.decrypt(sData, aes.secretKeySpec);
                                System.out.println("receive data in cipher:" +  new String(sData).substring(0,200));
                                byte[] bytes = new byte[32];
                                FileOutputStream fos;
                                fos = new FileOutputStream("/Users/anfalaljamea/Desktop/test.jpg");
                                fos.write(dataResult, 0, dataResult.length);
                                msg_area.append("\nFinish receving.\n");
                                fos.close();
                            } else {
                                byte[] bytes = new byte[32];
                                FileOutputStream fos;
                                try {
                                    fos = new FileOutputStream("/Users/anfalaljamea/Desktop/test.jpg");
                                    int a = 0;
                                    long length = in.readLong();
                                    msg_area.append("\n\nA client is sending you a file\n size:" + length);
                                    while (length > 0) {
                                        a = in.read(bytes, 0, bytes.length);
                                        length -= a;
                                        fos.write(bytes, 0, bytes.length);
                                        System.out.println("bytes:" + a);
                                    }
                                    msg_area.append("\nReceving finish .\n");
                                    fos.close();
                                } catch (IOException ex) {
                                    Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            }

                        } else if (type == 'm') {
                            if (isSecureMode) {
                                try {
                                    String msg;
                                    msg = aes.decrypt(in.readUTF(), aes.secretKeySpec);
                                    System.out.println(msg);
                                    msg_area.append("\nServer:" + msg);
                                } catch (IOException ex) {
                                    Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            } else {

                                try {
                                    String msg;
                                    msg = in.readUTF();
                                    System.out.println(msg);
                                    msg_area.append("\nServer:" + msg);
                                } catch (IOException ex) {
                                    Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            }
                        }  else if (type == 'p') {
                            System.out.println("\nGot publicKey of another end and sending passA to another end.");
                            byte[] encodedKey = Tools.getByteData(in);
                            publicKeyOfOther = app.byteToKey(encodedKey);

                            passA = Tools.getRandomNum();
                            byte[] byteHashedPassA = SHA.shaEncode(passA).getBytes();

                            byte[] byteEntryptedHashedPassA = app.encryptAllByPrivateKey(byteHashedPassA);
                            String message = passA + app.encodeBASE64(byteEntryptedHashedPassA);
                            byte[] data = app.encryptAllByOtherPublicKey(message.getBytes(), publicKeyOfOther);

                            out = new DataOutputStream(new BufferedOutputStream(s.getOutputStream()));
                            Tools.sendByteData(data, out, 't');
                        } else if (type == 'q') {
                            System.out.println("\nGot passA of aother end.");
                            byte[] dataIn = Tools.getByteData(in);
                            String d3 = new String(app.decryptAllByPrivateKey(dataIn));

                            String dataC = d3.substring(0, 252);
                            String passBatA = dataC.substring(0, 100);
                            String reponse = dataC.substring(100, 252);
                            String encrypt_TheHashofpassABAtA = d3.substring(252);

                            String hashedPassBandReponse = new String(app.decryptAllOtherByPublicKey(app.decodeBASE64(encrypt_TheHashofpassABAtA), publicKeyOfOther));

                            if (!hashedPassBandReponse.equals(passBatA + reponse)) {
                                System.out.println("fail to verify intigrity.");
                            }
                            System.out.println("success to varify intigrity.");
                            String PassAB = passA + passBatA;
                            String Kab = SHA.shaEncode(PassAB);
                            aes = new AESClass();
                            aes.createOwnKey(Kab);

                            if (aes.decrypt(reponse, aes.secretKeySpec).equals(passA)) {
                                System.out.println("\nGot seeion key, reponse verified:");
                                msg_area.append("\nSucurity link is established successfully.\n");
                                isSecureMode = true;
                                security_btn.setText("Stop");
                            };

                            // send
                            String ecnrypt_passB = aes.encrypt(passBatA, aes.secretKeySpec);
                            out = new DataOutputStream(new BufferedOutputStream(s.getOutputStream()));
                            Tools.sendByteData(ecnrypt_passB.getBytes(), out, 'u');

                        } else if (type == 's') {
                            // recieve request from client to communicate and get public key of it
                            msg_area.append("\n\nReceive a request for security connect.");
                            System.out.println("\nGot public Key from another end and sending my own public key.");
                            // app2 = server entity 
                            app2 = new RSA();
                            // get the recieve data as a byte
                            byte[] encodedKey = Tools.getByteData(in);
                            // convert it to publicKey object
                            publicKeyOfOther = app2.byteToKey(encodedKey);
                            
                            // send publick key to client
                            out = new DataOutputStream(new BufferedOutputStream(s.getOutputStream()));
                            byte[] data = app2.getPublicKey().getEncoded();
                            /* send public key to client & add tag to distigush which step we are in 
                            -- so we're going to client and find flag 'p' in reciever class
                                    */
                            Tools.sendByteData(data, out, 'p');

                        } else if (type == 't') {

                            System.out.println("\nGot passA of client and sending PassB of server and other data");

                            byte[] data = Tools.getByteData(in);
                            // decrypte the recieved data
                            byte[] result = app2.decryptAllByPrivateKey(data);
                            String d2 = new String(result);
                            // Get first 100 bit = PassA
                            String passAatB = d2.substring(0, 100);

                            // decrypt hash PassA
                            String decryptedHashedPassA = new String(app2.decryptAllOtherByPublicKey(app2.decodeBASE64(d2.substring(100)), publicKeyOfOther));

                            // compare the two hash values, if it's the same we acheive integrity for the data 
                            if (!decryptedHashedPassA.equals(SHA.shaEncode(passAatB))) {
                                msg_area.append("\nIntegrity check failed.");
                            }
                            System.out.println("Integrity confirmed.");

                            // crteate PassB 
                            passB = Tools.getRandomNum();
                            // combine PassA & PassB
                            String PassAB = passAatB + passB;

                            /* create the session kay by:
                            1- hash PassAB
                            2- Use AES to create the session key aes.createOwnKey() from AESClass
                            */
                            
                            String Kab = SHA.shaEncode(PassAB);
                            aes = new AESClass();
                            aes.createOwnKey(Kab);
                            // encrypte PassA by the session key Kab
                            String ecnrypt_passA = aes.encrypt(passAatB, aes.secretKeySpec);

                            // Encrypt the Hash(PassB + encrypted PassA by the session key)
                            String encrypt_TheHashofpassA_B = app2.encodeBASE64(app2.encryptAllByPrivateKey(shaEncode(passB + ecnrypt_passA).getBytes()));
//                      
                            /* Encrypt the (PassB + encrypted PassA by the session key +
                               Hash(PassB + encrypted PassA by the session key)) By public key of client
                            */
                            byte[] temp = app2.encryptAllByOtherPublicKey((passB + ecnrypt_passA + encrypt_TheHashofpassA_B).getBytes(), publicKeyOfOther);

                            // go to step 'q' in the client 
                            Tools.sendByteData(temp, out, 'q');
                        } else if (type == 'u') {

                            byte[] dataIn = Tools.getByteData(in);

                            // verify the session key by decrypt PassB 
                            if (aes.decrypt(new String(dataIn), aes.secretKeySpec).equals(passB)) {
                                System.out.println("\nGot seeion key, reponse verified.");
                                isSecureMode = true;
                                security_btn.setText("Stop");
                                msg_area.append("\nSucurity link is established successfully.");
                            };
                        } else if (type == 'v') {

                            isSecureMode = false;
                            msg_text.setText("");
                            security_btn.setText("Security");
                            msg_area.append("\n\nStop security comminication....\n");
                        }
                    }
                } catch (IOException ex) {
                    Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
                } catch (Exception ex) {
                    Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        
    }

    // Serversocket listening
    public class Listening implements Runnable {

        @Override
        public void run() {
            try {
                // create serversocket 
                ss = new ServerSocket(3000); // server starts at 3000 port number;
                System.out.println("Listenning...");
                // show info
                msg_area.append("Server start listening...\n");
                // change btns condition
                start_btn.setEnabled(false);
                stop_btn.setEnabled(true);
                // listening
                s = ss.accept();
                // Start a new thread to receive;
                Thread starter = new Thread(new Receive());
                starter.start();
            } catch (IOException ex) {
                Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }
    private void start_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_start_btnActionPerformed
        // Start a new thread to create sever listening
        Thread starter = new Thread(new Listening());
        starter.start();
    }//GEN-LAST:event_start_btnActionPerformed

    private void stop_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stop_btnActionPerformed
        // stop server;
        try {
            // show info
            msg_area.append("\n\nStop server.\n");
            // close serversocket
            ss.close();
            s.close();
        } catch (Exception ex) {
            // show error
            msg_area.append("Failed to stop server.\n");
        }
        // change btn conditions
        start_btn.setEnabled(true);
        stop_btn.setEnabled(false);
    }//GEN-LAST:event_stop_btnActionPerformed

    private void file_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_file_btnActionPerformed
        // file chooser
        JFileChooser chooser = new JFileChooser();

        // show dialog
        int returnVal = chooser.showOpenDialog(null);
        // if choose a file
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            // get file
            f = chooser.getSelectedFile();
            // get file name
            String filename = f.getName();
            // show file name to user
            // use as a tag to distinguish wheather user sending is  a file or or a msg
            fileAddress_lable.setText("You chose a file: " + filename);
        }
    }//GEN-LAST:event_file_btnActionPerformed

    private void security_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_security_btnActionPerformed
        if (isSecureMode) {
            try {
                isSecureMode = false;
                msg_text.setText("");
                security_btn.setText("Security");
                msg_area.append("\n\nStop security comminication....");
                out = new DataOutputStream(new BufferedOutputStream(s.getOutputStream()));
                byte[] data = new byte[0];
                Tools.sendByteData(data, out, 'v');
            } catch (IOException ex) {
                Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else {

            try {

                out = new DataOutputStream(new BufferedOutputStream(s.getOutputStream()));

                try {
                    app = new RSA();
                    byte[] data = app.getPublicKey().getEncoded();
                    Tools.sendByteData(data, out, 's');
                } catch (Exception ex) {
                    Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
                }

                String msg = msg_text.getText();
                msg_text.setText("");
                msg_area.append("\n\nRequest for security connect....");
                System.out.println("Sending public key");
                out.flush();
            } catch (IOException ex) {
                Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_security_btnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Server().setVisible(true);
            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel fileAddress_lable;
    private javax.swing.JButton file_btn;
    private javax.swing.JScrollPane jScrollPane1;
    private static javax.swing.JTextArea msg_area;
    private javax.swing.JButton msg_send;
    private javax.swing.JTextField msg_text;
    private javax.swing.JButton security_btn;
    private javax.swing.JButton start_btn;
    private javax.swing.JButton stop_btn;
    // End of variables declaration//GEN-END:variables
}
