package chats;
// buffered reader package, read data per line

import static chats.SHA.shaEncode;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
// data out stream package, socket data output is the same
import java.io.DataOutputStream;
// file packe process file
import java.io.File;
// file stream, output and input file;
import java.io.FileInputStream;
import java.io.FileOutputStream;
// Exception
import java.io.IOException;
// input stream package and reader
import java.io.InputStream;
// socket and serversocket
import java.net.Socket;
import java.security.PublicKey;
// exception logger
import java.util.logging.Level;
import java.util.logging.Logger;
// file chooser;
import javax.swing.JFileChooser;

// Client class from Frame
public class Client extends javax.swing.JFrame {

    // Client socket 
    static Socket s;
    DataOutputStream out;
    // File
    static File f;
    RSA app;
    RSA app2;
    PublicKey publicKeyOfOther;
    AESClass aes;
    boolean isSecureMode;

    // Creates new form Client
    public Client() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        msg_area = new javax.swing.JTextArea();
        msg_text = new javax.swing.JTextField();
        msg_send = new javax.swing.JButton();
        connect_btn = new javax.swing.JButton();
        address_field = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        disconnect_btn = new javax.swing.JButton();
        port_field = new javax.swing.JTextField();
        file_btn = new javax.swing.JButton();
        fileAddress_lable = new javax.swing.JLabel();
        security_btn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Chat - Client's frame");

        msg_area.setColumns(20);
        msg_area.setRows(5);
        jScrollPane1.setViewportView(msg_area);

        msg_text.setToolTipText("");
        msg_text.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                msg_textActionPerformed(evt);
            }
        });

        msg_send.setText("Send");
        msg_send.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                msg_sendActionPerformed(evt);
            }
        });

        connect_btn.setText("Connect");
        connect_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connect_btnActionPerformed(evt);
            }
        });

        address_field.setText("127.0.0.1");
        address_field.setToolTipText("");
        address_field.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                address_fieldActionPerformed(evt);
            }
        });

        jLabel1.setText("Address:");
        jLabel1.setToolTipText("");

        disconnect_btn.setText("Disconnect");
        disconnect_btn.setEnabled(false);
        disconnect_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disconnect_btnActionPerformed(evt);
            }
        });

        port_field.setText("3000");
        port_field.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                port_fieldActionPerformed(evt);
            }
        });

        file_btn.setText("Choose");
        file_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                file_btnActionPerformed(evt);
            }
        });

        fileAddress_lable.setText("File address..");

        security_btn.setText("Security");
        security_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                security_btnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(address_field, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(port_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 226, Short.MAX_VALUE)
                        .addComponent(connect_btn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(disconnect_btn))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(file_btn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fileAddress_lable)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(msg_text)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(msg_send)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(security_btn)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(file_btn)
                    .addComponent(fileAddress_lable))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(address_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(port_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(disconnect_btn)
                    .addComponent(connect_btn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(msg_text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(msg_send)
                    .addComponent(security_btn))
                .addGap(11, 11, 11))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void msg_sendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_msg_sendActionPerformed
        try {
            out = new DataOutputStream(new BufferedOutputStream(s.getOutputStream()));
        } catch (IOException ex) {
            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
        }
        // Send file or message?
        if (fileAddress_lable.getText() != "File address..") {
            // Show info to user;
            msg_area.append("\n\nStart transfer...\n");
            msg_area.append("File is " + (int) f.length() + " byte.\n");
            try {
                if (isSecureMode) {
                    
//                    byte[] bytes2 = "sdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111sdfsdfsdfsdfsdfsdfsdfsdf111".getBytes();
                    InputStream is = new FileInputStream(f);
                    ByteArrayOutputStream buffer2 = new ByteArrayOutputStream();
                    // Get the size of the file
                    int length = (int) f.length();
                    byte[] bytes = new byte[32];
                    int a = 0;

                    while (length >0 && ( (a = is.read(bytes)) !=-1)) {
                        length-=a;
                        buffer2.write(bytes, 0, a);
                    }
                    byte[] input = buffer2.toByteArray();
                    byte[]  sData = aes.encrypt(input, aes.secretKeySpec);
                    
                    System.out.println("transfer in cipher:" + new String(sData).substring(0,200));
                   
                    out.writeChar('f');
                    out.writeLong(sData.length);
                    out.write(sData);
                    out.flush();
                    is.close();
                } else {

                    InputStream is = new FileInputStream(f);

                    // Get the size of the file
                    int length = (int) f.length();
                    out.writeChar('f');
                    out.writeLong(length);
                    byte[] bytes = new byte[32];
                    int a;
                    while ((a = is.read(bytes)) > 0) {

                        out.write(bytes, 0, a);
                        length -= a;
                        System.out.println("length:" + length);
                        System.out.println("bytes:" + a);
                        // send a lock of data even if it is not big enough
                        out.flush();
                    }
                    is.close();
                }
                //show info
                msg_area.append("Transfer finished.\n\n");
                // reset file address
                fileAddress_lable.setText("File address..");
            } catch (IOException ex) {
                Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            try {
                out.writeChar('m');
                if (isSecureMode) {;
                    try {
                        String msg = msg_text.getText();
                        msg_text.setText("");
                        msg_area.append("\nMe:" + msg);
                        msg = aes.encrypt(msg, aes.secretKeySpec);
                        System.out.println(msg);
                        out.writeUTF(msg);
                        out.flush();
                    } catch (IOException ex) {
                        Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else {

                    try {
                        String msg = msg_text.getText();
                        msg_text.setText("");
                        msg_area.append("\nMe:" + msg);
                        out.writeUTF(msg);
                        System.out.println(msg);
                        out.flush();
                    } catch (IOException ex) {
                        Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                out.flush();
            } catch (IOException ex) {
                Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_msg_sendActionPerformed

    private void port_fieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_port_fieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_port_fieldActionPerformed
    public class Receive implements Runnable {

        // Variables
        InputStream is;
        DataInputStream in;
        String hashedPassA;
        String passA;
        String passB;

        // Constructor. initislise basic variables
        public Receive() {
            try {
                // Input stream
                is = s.getInputStream();
                in = new DataInputStream(new BufferedInputStream(s.getInputStream()));

            } catch (IOException e1) {
                System.out.println(e1.getMessage());
            }
        }

        @Override
        public void run() {
            while (true) {
                try {
                    
                    if (in.available() > 0) {
                        char type = 0;
                        try {
                            type = in.readChar();
                        } catch (IOException ex) {
                            Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
                        }

                        // if file
                        if (type == 'f') {

                            if (isSecureMode) {
                                byte[] sData = Tools.getByteData(in);
                                msg_area.append("\nA client is sending you a file\nsize:" + sData.length);
                                byte[] dataResult = aes.decrypt(sData, aes.secretKeySpec);
                                System.out.println("receive data in cipher:" +  new String(sData).substring(0,50));
                                byte[] bytes = new byte[32];
                                FileOutputStream fos;
                                fos = new FileOutputStream("/Users/anfalaljamea/Desktop/Chats/test.jpg");
                                fos.write(dataResult, 0, dataResult.length);
                                msg_area.append("\nFinish receving.\n");
                                fos.close();
                            } else {
                                byte[] bytes = new byte[32];
                                FileOutputStream fos;
                                try {
                                    fos = new FileOutputStream("/Users/anfalaljamea/Desktop/Chats/test.jpg");
                                    int a = 0;
                                    long length = in.readLong();
                                    msg_area.append("\nA client is sending you a file\n size:" + length);
                                    while (length > 0) {
                                        a = in.read(bytes, 0, bytes.length);
                                        length -= a;
                                        fos.write(bytes, 0, bytes.length);
                                        System.out.println("bytes:" + a);
                                        System.out.println("length:" + length);
                                    }
                                    msg_area.append("\nFinish receving.\n");
                                    fos.close();
                                } catch (IOException ex) {
                                    Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            }

                        } else if (type == 'm') {
                            if (isSecureMode) {
                                try {
                                    String msg;
                                    msg = aes.decrypt(in.readUTF(), aes.secretKeySpec);
                                    System.out.println(msg);
                                    msg_area.append("\nServer:" + msg);
                                } catch (IOException ex) {
                                    Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            } else {

                                try {
                                    String msg;
                                    msg = in.readUTF();
                                    System.out.println(msg);
                                    msg_area.append("\nServer:" + msg);
                                } catch (IOException ex) {
                                    Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            }
                        } else if (type == 'p') {
                            // Got public key & start the first step of protocol which is send PassA
                            System.out.println("\nGot publicKey of another end and sending passA to another end.");
                            // store the public key of server 
                            byte[] encodedKey = Tools.getByteData(in);
                            publicKeyOfOther = app.byteToKey(encodedKey);

                            // generate PassA 
                            passA = Tools.getRandomNum();
                            // Hash PassA and convert it from string to byte
                            byte[] byteHashedPassA = SHA.shaEncode(passA).getBytes();

                            // encrypt byte[] byteHashedPassA by private key of client(A)
                            byte[] byteEntryptedHashedPassA = app.encryptAllByPrivateKey(byteHashedPassA);
                            // combine the whole message(PassA + Encrypted hased PassA)
                            String message = passA + app.encodeBASE64(byteEntryptedHashedPassA);
                            // Whole message encrypted by public key of server 
                            byte[] data = app.encryptAllByOtherPublicKey(message.getBytes(), publicKeyOfOther);

                            // send it out and go to step 't'
                            out = new DataOutputStream(new BufferedOutputStream(s.getOutputStream()));
                            Tools.sendByteData(data, out, 't');
                        } else if (type == 'q') {
                            
                            System.out.println("\nGot passB from server.");
                            byte[] dataIn = Tools.getByteData(in);
                            // decrypte all the recieved data from server by client private key Ka
                            String d3 = new String(app.decryptAllByPrivateKey(dataIn));

                            // get the first two blocks
                            String dataC = d3.substring(0, 252);
                            // get PassB
                            String passBatA = dataC.substring(0, 100);
                            // get the second block
                            String reponse = dataC.substring(100, 252);
                            // get the encrypted  third block 
                            String encrypt_TheHashofpassABAtA = d3.substring(252);

                            // decrypt the third block to check integrity by public key of server
                            String hashedPassBandReponse = new String(app.decryptAllOtherByPublicKey(app.decodeBASE64(encrypt_TheHashofpassABAtA), publicKeyOfOther));

                            // check the integrity
                            if (!hashedPassBandReponse.equals(shaEncode(passBatA + reponse))) {
                                System.out.println("fail to verify intigrity.");
                            }
                            System.out.println("success to varify intigrity.");
                            // combine PassA + PassB
                            String PassAB = passA + passBatA;
                            /* create client session key, which should be the same as Server's 
                            Session key */
                            String Kab = SHA.shaEncode(PassAB);
                            aes = new AESClass();
                            aes.createOwnKey(Kab);

                            /* ckecking the response to make sure that my session key is same 
                            as server's session key 
                            If it's wright so both entities have the same session key, 
                            so the secure connection has been establieshed*/
                            
                            if (aes.decrypt(reponse, aes.secretKeySpec).equals(passA)) {
                                System.out.println("\nGot seeion key, reponse verified:");
                                msg_area.append("\nSucurity link is established successfully.\n");
                                // set the mode as true 
                                isSecureMode = true;
                                security_btn.setText("Stop");
                            };

                            // The last step in the protocol: send the respond to server side 
                            String ecnrypt_passB = aes.encrypt(passBatA, aes.secretKeySpec);
                            out = new DataOutputStream(new BufferedOutputStream(s.getOutputStream()));
                            // now we go to step 'u' in server side 
                            Tools.sendByteData(ecnrypt_passB.getBytes(), out, 'u');

                        } else if (type == 's') {
                            msg_area.append("\n\nReceive a request for security connect.");
                            System.out.println("\nGot public Key from another end and sending my own public key.");

                            app2 = new RSA();

                            byte[] encodedKey = Tools.getByteData(in);
                            publicKeyOfOther = app2.byteToKey(encodedKey);
                            // send publick key to other side
                            out = new DataOutputStream(new BufferedOutputStream(s.getOutputStream()));
                            byte[] data = app2.getPublicKey().getEncoded();
                            Tools.sendByteData(data, out, 'p');

                        } else if (type == 't') {

                            System.out.println("\nGot passA of aother end and sending own passB and other data");

                            byte[] data = Tools.getByteData(in);
                            byte[] result = app2.decryptAllByPrivateKey(data);
                            String d2 = new String(result);
                            String passAatB = d2.substring(0, 100);

                            String decryptedHashedPassA = new String(app2.decryptAllOtherByPublicKey(app2.decodeBASE64(d2.substring(100)), publicKeyOfOther));

                            if (!decryptedHashedPassA.equals(SHA.shaEncode(passAatB))) {
                                msg_area.append("\nIntegrity check failed.");
                            }
                            System.out.println("Integrity confirmed.");

                            // second step
                            passB = Tools.getRandomNum();
                            String PassAB = passAatB + passB;

                            String Kab = SHA.shaEncode(PassAB);
                            aes = new AESClass();
                            aes.createOwnKey(Kab);
                            String ecnrypt_passA = aes.encrypt(passAatB, aes.secretKeySpec);

                            String encrypt_TheHashofpassA_B = app.encodeBASE64(app2.encryptAllByPrivateKey((passB + ecnrypt_passA).getBytes()));
//                      
                            byte[] temp = app.encryptAllByOtherPublicKey((passB + ecnrypt_passA + encrypt_TheHashofpassA_B).getBytes(), publicKeyOfOther);

                            Tools.sendByteData(temp, out, 'q');
                        } else if (type == 'u') {

                            byte[] dataIn = Tools.getByteData(in);

                            if (aes.decrypt(new String(dataIn), aes.secretKeySpec).equals(passB)) {
                                System.out.println("\nGot seeion key, reponse verified.");
                                isSecureMode = true;
                                security_btn.setText("Stop");
                                msg_area.append("\nSucurity link is established already.\n");
                            };
                        } else if (type == 'v') {

                            isSecureMode = false;
                            msg_text.setText("");
                            security_btn.setText("Security");
                            msg_area.append("\nStop security comminication....");
                        }
                    }
                } catch (IOException ex) {
                    Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
                } catch (Exception ex) {
                    Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }


    private void connect_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connect_btnActionPerformed

        // get ip
        String address = address_field.getText();
        // get port
        int port = Integer.parseInt(port_field.getText());
        try {
            // establish a socket;
            s = new Socket(address, port);
            // change buttons 
            connect_btn.setEnabled(false);
            disconnect_btn.setEnabled(true);

            // start a new recever thread
            Thread starter = new Thread(new Receive());
            starter.start();

            // show info to user
            msg_area.append("Client:has connected.\n");
        } catch (IOException ex) {
            // show info and change btns
            msg_area.append("Cannot Connect! Try Again.\n");
            connect_btn.setEnabled(true);
            disconnect_btn.setEnabled(false);
        }

    }//GEN-LAST:event_connect_btnActionPerformed

    private void disconnect_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disconnect_btnActionPerformed

        try {
            // show info
            msg_area.append("Disconnected.\n");
            // close socket;
            s.close();
            //change btns;
            connect_btn.setEnabled(true);
            disconnect_btn.setEnabled(false);
        } catch (Exception ex) {
            // show info
            msg_area.append("Failed to disconnect. \n");
        }
    }//GEN-LAST:event_disconnect_btnActionPerformed

    private void file_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_file_btnActionPerformed
        // file chooser
        JFileChooser chooser = new JFileChooser();

        // show dialog
        int returnVal = chooser.showOpenDialog(null);
        // if choose a file
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            // get file 
            f = chooser.getSelectedFile();
            // get file name
            String filename = f.getName();
            // show file name to user
            // use as a tag to distinguish wheather user sending is  a file or or a msg
            fileAddress_lable.setText("You chose a file: " + filename);
        }
    }//GEN-LAST:event_file_btnActionPerformed

    private void address_fieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_address_fieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_address_fieldActionPerformed

    private void security_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_security_btnActionPerformed
        
        try {
            out = new DataOutputStream(new BufferedOutputStream(s.getOutputStream()));
        } catch (IOException ex) {
            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (isSecureMode) {
            try {
                isSecureMode = false;
                msg_text.setText("");
                security_btn.setText("Security");
                msg_area.append("\n\nStop security comminication....");
                byte[] data = new byte[0];
                Tools.sendByteData(data, out, 'v');
            } catch (IOException ex) {
                Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else {

            try {
                try {
                    app = new RSA();
                    // your own public key in byte
                    byte[] data = app.getPublicKey().getEncoded();
                    // 's' first step .. Send data out then go to server side
                    Tools.sendByteData(data, out, 's');
                } catch (Exception ex) {
                    Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
                }

                String msg = msg_text.getText();
                msg_text.setText("");
                msg_area.append("\n\nRequest for security connect....");
                System.out.println("Sending public key");
                out.flush();
            } catch (IOException ex) {
                Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_security_btnActionPerformed

    private void msg_textActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_msg_textActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_msg_textActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Client().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField address_field;
    private javax.swing.JButton connect_btn;
    private javax.swing.JButton disconnect_btn;
    private javax.swing.JLabel fileAddress_lable;
    private javax.swing.JButton file_btn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private static javax.swing.JTextArea msg_area;
    private javax.swing.JButton msg_send;
    private javax.swing.JTextField msg_text;
    private javax.swing.JTextField port_field;
    private javax.swing.JButton security_btn;
    // End of variables declaration//GEN-END:variables
}
