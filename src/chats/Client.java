
package chats;
// buffered reader package, read data per line
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.DataInputStream;
// data out stream package, socket data output is the same
import java.io.DataOutputStream;
// file packe process file
import java.io.File;
// file stream, output and input file;
import java.io.FileInputStream;
import java.io.FileOutputStream;
// Exception
import java.io.IOException;
// input stream package and reader
import java.io.InputStream;
import java.io.InputStreamReader;
// print stream package, print a line 
import java.io.PrintStream;
// socket and serversocket
import java.net.Socket;
import java.util.Arrays;
// exception logger
import java.util.logging.Level;
import java.util.logging.Logger;
// file chooser;
import javax.swing.JFileChooser;



// Client class from Frame
public class Client extends javax.swing.JFrame {

    // Client socket 
    static Socket s;
    DataOutputStream out;
    // File
    static File f;
    // Creates new form Client
    public Client() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        msg_area = new javax.swing.JTextArea();
        msg_text = new javax.swing.JTextField();
        msg_send = new javax.swing.JButton();
        connect_btn = new javax.swing.JButton();
        address_field = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        disconnect_btn = new javax.swing.JButton();
        port_field = new javax.swing.JTextField();
        file_btn = new javax.swing.JButton();
        fileAddress_lable = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Chat - Client's frame");

        msg_area.setColumns(20);
        msg_area.setRows(5);
        jScrollPane1.setViewportView(msg_area);

        msg_text.setToolTipText("");

        msg_send.setText("Send");
        msg_send.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                msg_sendActionPerformed(evt);
            }
        });

        connect_btn.setText("Connect");
        connect_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connect_btnActionPerformed(evt);
            }
        });

        address_field.setText("127.0.0.1");
        address_field.setToolTipText("");
        address_field.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                address_fieldActionPerformed(evt);
            }
        });

        jLabel1.setText("Address:");
        jLabel1.setToolTipText("");

        disconnect_btn.setText("Disconnect");
        disconnect_btn.setEnabled(false);
        disconnect_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disconnect_btnActionPerformed(evt);
            }
        });

        port_field.setText("3000");
        port_field.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                port_fieldActionPerformed(evt);
            }
        });

        file_btn.setText("Choose");
        file_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                file_btnActionPerformed(evt);
            }
        });

        fileAddress_lable.setText("File address..");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(address_field, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(port_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 147, Short.MAX_VALUE)
                        .addComponent(connect_btn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(disconnect_btn))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(msg_text)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(msg_send))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(file_btn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(fileAddress_lable)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(file_btn)
                    .addComponent(fileAddress_lable))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(address_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(port_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(disconnect_btn)
                    .addComponent(connect_btn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(msg_text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(msg_send)
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void msg_sendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_msg_sendActionPerformed
        try {
            out = new DataOutputStream(new BufferedOutputStream(s.getOutputStream()));
        } catch (IOException ex) {
            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
        }
        // Send file or message?
        if(fileAddress_lable.getText() != "File address.."){
            // Show info to user;
            msg_area.append("\n\nStart transfer...\n");
            msg_area.append("File is " + (int) f.length() + " byte.\n");
            try {
   
                InputStream is = new FileInputStream(f);
                // Get the size of the file
                int length = (int)f.length();
                out.writeChar('f');
                out.writeLong(length);
                byte[] bytes = new byte[16 * 1024];
                int a; 
                while ( (a = is.read(bytes)) > 0) {
                    
                    out.write(bytes, 0, a);
                    length -= a;
                    System.out.println("length:" + length);
                    System.out.println("bytes:" + a);
                    // send a lock of data even if it is not big enough
                    out.flush();
                }
                is.close();
                //show info
                msg_area.append("Transfer finished.\n\n");
                // reset file address
                fileAddress_lable.setText("File address..");
            } catch (IOException ex) {
                Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
            }       
        } else {
            try {
                out.writeChar('m');
                String msg = msg_text.getText();
                msg_text.setText("");
                msg_area.append("\nMe:" + msg );
                out.writeUTF(msg);
                System.out.println(msg);
                out.flush();
            } catch (IOException ex) {
                Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_msg_sendActionPerformed

    private void port_fieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_port_fieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_port_fieldActionPerformed
    public class Receive implements Runnable {

        // Variables
        InputStream is;
        DataInputStream in;

        // Constructor. initislise basic variables
        public Receive() {
            try {
                // Input stream
                is = s.getInputStream();
                in = new DataInputStream(new BufferedInputStream(s.getInputStream()));
            } catch (IOException e1) {
                System.out.println(e1.getMessage());
            }
        }

        @Override
        public void run() {
            while (true) {
                try {
                    if (in.available() > 0) {
                        char type = 0;
                        try {
                            type = in.readChar();
                        } catch (IOException ex) {
                            Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        System.out.println(type == 'f');
                        // if file
                        if (type == 'f') {
                            byte[] bytes = new byte[32];
                            FileOutputStream fos;
                            try {
                                fos = new FileOutputStream("D:\\test.jpg");
                                int a = 0;
                                long length = in.readLong();
                                System.out.println(length);
                                msg_area.append("\nA client is sending you a file\n size:" + length);
                                while (length > 0) {
                                    a = in.read(bytes, 0, bytes.length);
                                    length -= a;
                                    fos.write(bytes, 0, bytes.length);
                                    System.out.println("bytes:" + a);
                                    System.out.println("length:" + length);
                                }
                                msg_area.append("\nFinish receving.\n");
                                fos.close();
                            } catch (IOException ex) {
                                Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
                            }

                        } else {
                            try {
                                String msg;
                                msg = in.readUTF();
                                System.out.println(msg);
                                msg_area.append("\nServer:" + msg);
                            } catch (IOException ex) {
                                Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    }
                } catch (IOException ex) {
                    Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }

    
    private void connect_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connect_btnActionPerformed
        
        // get ip
        String address = address_field.getText();
        // get port
        int port = Integer.parseInt(port_field.getText());
        try {
            // establish a socket;
            s = new Socket(address, port);
            // change buttons 
            connect_btn.setEnabled(false);
            disconnect_btn.setEnabled(true);
            
            // start a new recever thread
            Thread starter = new Thread(new Receive());
            starter.start();
            
            // show info to user
            msg_area.append("Client:has connected.\n");
        } catch (IOException ex) { 
            // show info and change btns
            msg_area.append("Cannot Connect! Try Again.\n");
            connect_btn.setEnabled(true);
            disconnect_btn.setEnabled(false);
        }
        
    }//GEN-LAST:event_connect_btnActionPerformed

    private void disconnect_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disconnect_btnActionPerformed
        
        try 
        {
            // show info
            msg_area.append("Disconnected.\n");
            // close socket;
            s.close();
            //change btns;
            connect_btn.setEnabled(true);
            disconnect_btn.setEnabled(false);
        } catch(Exception ex) {
            // show info
            msg_area.append("Failed to disconnect. \n");
        }
    }//GEN-LAST:event_disconnect_btnActionPerformed

    private void file_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_file_btnActionPerformed
        // file chooser
        JFileChooser chooser = new JFileChooser();
        
        // show dialog
        int returnVal = chooser.showOpenDialog(null);
        // if choose a file
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            // get file 
            f  = chooser.getSelectedFile();
            // get file name
            String filename = f.getName();
            // show file name to user
            // use as a tag to distinguish wheather user sending is  a file or or a msg
            fileAddress_lable.setText("You chose a file: " + filename);
        }
    }//GEN-LAST:event_file_btnActionPerformed

    private void address_fieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_address_fieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_address_fieldActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Client().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField address_field;
    private javax.swing.JButton connect_btn;
    private javax.swing.JButton disconnect_btn;
    private javax.swing.JLabel fileAddress_lable;
    private javax.swing.JButton file_btn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private static javax.swing.JTextArea msg_area;
    private javax.swing.JButton msg_send;
    private javax.swing.JTextField msg_text;
    private javax.swing.JTextField port_field;
    // End of variables declaration//GEN-END:variables
}
